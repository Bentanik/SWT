import OAuth2Strategy, { InternalOAuthError } from 'passport-oauth2';

/* eslint-disable @typescript-eslint/naming-convention */
class GoogleOauthTokenStrategy extends OAuth2Strategy {
    _tokenURL;
    _profileURL;
    _profileParser;
    _passReqToCallback;
    _skipUserProfile;
    _verify;
    constructor({ tokenURL, profileURL, profileParser, authURLVersion, tokenURLVersion, skipUserProfile, authorizationURL, passReqToCallback, userinfoURLVersion, ...rest } = {}, verify) {
        super({
            ...rest,
            skipUserProfile,
            passReqToCallback,
            tokenURL: tokenURL ||
                `https://www.googleapis.com/oauth2/${tokenURLVersion || 'v4'}/token`,
            authorizationURL: authorizationURL ||
                `https://accounts.google.com/o/oauth2/${authURLVersion || 'v2'}/auth`,
        }, verify);
        this.name = 'google-oauth-token';
        this._skipUserProfile =
            skipUserProfile === undefined ? false : skipUserProfile;
        this._passReqToCallback = passReqToCallback;
        this._verify = verify;
        this._profileURL =
            profileURL ||
                `https://www.googleapis.com/oauth2/${userinfoURLVersion || 'v3'}/userinfo`;
        this._tokenURL =
            tokenURL ||
                `https://www.googleapis.com/oauth2/${tokenURLVersion || 'v4'}/token`;
        this._profileParser =
            profileParser || GoogleOauthTokenStrategy.parseProfile;
    }
    authenticate(req, _options) {
        const accessToken = this._lookup(req, 'access_token');
        const refreshToken = this._lookup(req, 'refresh_token');
        this._loadUserProfile(accessToken, (error, profile) => {
            if (error) {
                return this.error(error);
            }
            const verified = (error, user, 
            // eslint-disable-next-line @typescript-eslint/ban-types
            info) => {
                if (error) {
                    return this.error(error);
                }
                if (!user) {
                    return this.fail(info);
                }
                return this.success(user, info);
            };
            // TODO: fix type based on passReqToCallback param
            if (this._passReqToCallback) {
                this._verify(req, accessToken, refreshToken, profile, verified);
            }
            else {
                this._verify(accessToken, refreshToken, profile, verified);
            }
        });
    }
    userProfile(accessToken, done) {
        this._oauth2.get(this._profileURL, accessToken, (error, body, _res) => {
            if (error) {
                return done(new InternalOAuthError('Failed to fetch user profile', error));
            }
            try {
                let json = body;
                if (typeof body === 'string') {
                    json = JSON.parse(body);
                }
                const profile = this._profileParser(json);
                profile._raw = body;
                done(null, profile);
            }
            catch (e) {
                done(e);
            }
        });
    }
    _lookupAuthorization(req) {
        if (!req.headers?.authorization) {
            return '';
        }
        const matches = req.headers.authorization.match(/(\S+)\s+(\S+)/);
        if (matches?.[1].toLowerCase() !== 'bearer') {
            return '';
        }
        return matches?.[2] || '';
    }
    _lookup(req, field) {
        return ((req.body && req.body[field]) ||
            (req.query && req.query[field]) ||
            (req.headers && req.headers[field]) ||
            this._lookupAuthorization(req));
    }
    _loadUserProfile(accessToken, done) {
        const loadIt = () => {
            return this.userProfile(accessToken, done);
        };
        const skipIt = () => {
            return done(null);
        };
        if (typeof this._skipUserProfile == 'function' &&
            this._skipUserProfile.length > 1) {
            this._skipUserProfile(accessToken, function (err, skip) {
                if (err) {
                    return done(err);
                }
                if (!skip) {
                    return loadIt();
                }
                return skipIt();
            });
        }
        else {
            const skip = typeof this._skipUserProfile == 'function'
                ? this._skipUserProfile()
                : this._skipUserProfile;
            if (!skip) {
                return loadIt();
            }
            return skipIt();
        }
    }
    get profileUrl() {
        return this._profileURL;
    }
    get oauth2Instance() {
        return this._oauth2;
    }
    get tokenURL() {
        return this._tokenURL;
    }
    static parseProfile(json) {
        const profile = {
            provider: 'google',
            id: json.sub || json.id,
            displayName: json.name || '',
        };
        if (json.family_name || json.given_name) {
            profile.name = {
                familyName: json.family_name,
                givenName: json.given_name,
            };
        }
        if (json.email) {
            profile.emails = [{ value: json.email, verified: json.email_verified }];
        }
        if (json.picture) {
            profile.photos = [{ value: json.picture }];
        }
        profile._json = json;
        return profile;
    }
}

export { GoogleOauthTokenStrategy as default };
