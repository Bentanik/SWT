import OAuth2Strategy from 'passport-oauth2';
import type { OAuth2 } from 'oauth';
import type { Request } from 'express';
import type { Profile, VerifyCallback, VerifyFunction, SkipUserProfile, StrategyOptions, VerifyFunctionWithRequest, StrategyOptionsWithRequest } from './interface';
interface IProfileJSON {
    id: string;
    sub?: string;
    name?: string;
    email?: string;
    picture?: string;
    given_name?: string;
    family_name?: string;
    email_verified: boolean;
}
export default class GoogleOauthTokenStrategy extends OAuth2Strategy {
    protected _tokenURL: string;
    protected _profileURL: string;
    protected _profileParser: (data: any) => any;
    protected _passReqToCallback: boolean | undefined;
    protected _skipUserProfile: boolean | SkipUserProfile;
    protected _verify: VerifyFunctionWithRequest | VerifyFunction;
    constructor(options: StrategyOptionsWithRequest, verify: VerifyFunctionWithRequest);
    constructor(options: StrategyOptions, verify: VerifyFunction);
    authenticate(req: Request, _options: StrategyOptionsWithRequest): void;
    userProfile(accessToken: string, done: VerifyCallback): void;
    protected _lookupAuthorization(req: Request): string;
    protected _lookup(req: Request, field: string): string;
    protected _loadUserProfile(accessToken: string, done: VerifyCallback): void;
    get profileUrl(): string;
    get oauth2Instance(): OAuth2;
    get tokenURL(): string;
    static parseProfile(json: IProfileJSON): Profile;
}
export {};
